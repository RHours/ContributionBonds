%{
open System

open Internal.Utilities.Text.Parsing

type JsonNumber =
    | JsonInteger   of int
    | JsonFloat     of float

type JsonValue = 
    | JsonObject    of Map<string, JsonValue>
    | JsonArray     of JsonValue array
    | JsonString    of string
    | JsonNumber    of JsonNumber
    | JsonBool      of bool
    | JsonNull

let JsonMembersToMap (members: (string * JsonValue) list) : Map<string, JsonValue> =
    let empty = Map.empty<string, JsonValue>
    let add k v acc = 
        if Map.containsKey k acc then
            failwith "duplicate key in object"
        else
            Map.add k v acc
        
    List.fold (fun acc (k,v) -> add k v acc) empty members


%}

// The start token becomes a parser function in the compiled code:
%start json

// Regular tokens
%token <string> STRING INTEGER FRACTION EXPONENT
%token TRUE FALSE NULL LBRACE RBRACE LBRACKET RBRACKET COMMA COLON
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
%type < JsonValue > json

%% 

json:
	| element       { $1 }

value:
	| object		{ JsonValue.JsonObject($1) }
	| array			{ JsonValue.JsonArray($1) }
	| string		{ JsonValue.JsonString($1) }
	| number		{ JsonValue.JsonNumber($1) }
	| TRUE			{ JsonValue.JsonBool(true) }
	| FALSE			{ JsonValue.JsonBool(false) }
	| NULL			{ JsonValue.JsonNull }
 
 object:
	| LBRACE RBRACE				{ (Map.empty<string, JsonValue>) }
	| LBRACE members RBRACE		{ (JsonMembersToMap $2) }

members:
	| jsonmember                    { [ $1 ]  }
	| jsonmember COMMA members		{ $1 :: $3 }

jsonmember:
	| string COLON element		{ ($1, $3) }

array:
	| LBRACKET RBRACKET				{ [| |] }
	| LBRACKET elements RBRACKET	{ (Array.ofList ($2)) }

elements:
    | element                   { [ $1 ] }
    | element COMMA elements    { $1 :: $3 }

element:
    | value                     { $1 }

string:
    | STRING                    { $1 }

number:
    | INTEGER FRACTION EXPONENT { JsonNumber.JsonFloat(System.Convert.ToDouble($1 + $2 + $3)) }
    | INTEGER FRACTION          { JsonNumber.JsonFloat(System.Convert.ToDouble($1 + $2)) }
    | INTEGER EXPONENT          { JsonNumber.JsonFloat(System.Convert.ToDouble($1 + $2)) }
    | INTEGER                   { JsonNumber.JsonInteger(System.Convert.ToInt32($1)) }
