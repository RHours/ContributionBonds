%{
open System

open Internal.Utilities.Text.Parsing

%}

// The start token becomes a parser function in the compiled code:
%start json

// Regular tokens
%token <string> STRING INTEGER FRACTION EXPONENT
%token TRUE FALSE NULL LBRACE RBRACE LBRACKET RBRACKET COMMA COLON
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
%type < obj > json

%% 

json:
	| element       { $1 }

value:
	| object		{ null }
	| array			{ null }
	| string		{ $1 }
	| number		{ $1 }
	| TRUE			{ true :> obj }
	| FALSE			{ false :> obj }
	| NULL			{ null }
 
 object:
	| LBRACE RBRACE				{ null }
	| LBRACE members RBRACE		{ null }

members:
	| jsonmember                    { null }
	| jsonmember COMMA members		{ null }

jsonmember:
	| string COLON element		{ null }

array:
	| LBRACKET RBRACKET				{ null }
	| LBRACKET elements RBRACKET	{ null }

elements:
    | element                   { null }
    | element COMMA elements    { null }

element:
    | value                     { $1 }

string:
    | STRING                    { $1 :> obj }

number:
    | INTEGER FRACTION EXPONENT { System.Convert.ToDouble($1 + $2 + $3) :> obj }
    | INTEGER FRACTION          { System.Convert.ToDouble($1 + $2) :> obj }
    | INTEGER EXPONENT          { System.Convert.ToDouble($1 + $2) :> obj }
    | INTEGER                   { System.Convert.ToInt32($1) :> obj }
