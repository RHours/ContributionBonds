{
open System
open System.Text

// Opens methods related to fslex.exe
open Internal.Utilities.Text.Lexing

let lexeme = LexBuffer<_>.LexemeString

let JsonHexToInt (jc:char) : int =
    if '0' <= jc && jc <= '9' then
        int(jc) - int('0')
    elif 'a' <= jc && jc <= 'f' then
        (int(jc) - int('a')) + 10
    elif 'A' <= jc && jc <= 'F' then
        (int(jc) - int('A')) + 10
    else
        failwith "error"

let JsonStringToString (js:string) : string =
    let sb = System.Text.StringBuilder()
    let rec scan mode i =
        match js.[i] with
        | _ when i >= js.Length -> ()
        | '\"' when mode = 0 -> scan 1 (i+1)
        | '\"' when mode = 1 -> ()
        | '\\' when mode = 1 -> scan 2 (i+1)
        | '\"' when mode = 2 -> sb.Append('\"') |> ignore; scan 1 (i+1)
        | '\\' when mode = 2 -> sb.Append('\\') |> ignore; scan 1 (i+1)
        | '/' when mode = 2 -> sb.Append('/') |> ignore; scan 1 (i+1)
        | '\b' when mode = 2 -> sb.Append('\b') |> ignore; scan 1 (i+1)
        | '\f' when mode = 2 -> sb.Append('\f') |> ignore; scan 1 (i+1)
        | '\n' when mode = 2 -> sb.Append('\n') |> ignore; scan 1 (i+1)
        | '\r' when mode = 2 -> sb.Append('\r') |> ignore; scan 1 (i+1)
        | '\t' when mode = 2 -> sb.Append('\t') |> ignore; scan 1 (i+1)
        | 'u' when mode = 2 -> 
            let hexescape : int = (0x1000 * (JsonHexToInt (js.[i+1]))) + (0x100 * (JsonHexToInt (js.[i+2]))) + (0x10 * (JsonHexToInt (js.[i+3]))) + (JsonHexToInt (js.[i+4]))
            sb.Append(System.Convert.ToChar(hexescape)) |> ignore
            scan 0 (i+5)
        | c -> sb.Append(c) |> ignore; scan 1 (i+1)

    scan 0 0
    sb.ToString()

}

let hex_digit = ['0'-'9' 'A'-'F' 'a'-'f']
let digit = ['0'-'9']
let onenine = ['1'-'9']
let integer = digit | onenine digit+ | '-' digit | '-' onenine digit+
let fraction = '.' digit+
let sign = '+' | '-'
let exponent = ('e' | 'E') sign? digit+
let escape = ['\"' '\\' 'b' 'f' 'n' 'r' 't'] | 'u' hex_digit hex_digit hex_digit hex_digit
let character = (['\u0020' '\u0021'] | ['\u0023'-'\u005b' ] | ['\u005d'-'\u01ff']) | '\\' escape
let string = '\"' character* '\"'
let ws = [' ' '\r' '\n' '\t' ]

rule json = parse
| string					{ Parser.STRING( JsonStringToString (lexeme lexbuf) ) }
| integer					{ Parser.INTEGER( lexeme lexbuf ) }
| fraction					{ Parser.FRACTION( lexeme lexbuf ) }
| exponent					{ Parser.EXPONENT( lexeme lexbuf ) }
| '{'						{ Parser.LBRACE }
| '}'						{ Parser.RBRACE }
| '['						{ Parser.LBRACKET }
| ']'						{ Parser.RBRACKET }
| ','						{ Parser.COMMA }
| ':'						{ Parser.COLON }
| "true"					{ Parser.TRUE }
| "false"					{ Parser.FALSE }
| "null"					{ Parser.NULL }
| ws						{ json lexbuf }
| eof                       { Parser.EOF }
| _                         { failwith "error 1" }
