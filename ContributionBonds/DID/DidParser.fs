// Implementation file for parser generated by fsyacc
module internal Did.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Internal.Utilities.Text.Lexing
open Internal.Utilities.Text.Parsing.ParseHelpers
# 1 "DID\DidParser.fsy"

open System

open Internal.Utilities.Text.Parsing

type DecentralizedIdentifier =
    {
        MethodName: string;
        MethodSpecificIds: string array
    }



# 20 "DID\DidParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | DID_COLON
  | COLON
  | PERIOD
  | DASH
  | UNDERSCORE
  | LOWER_AZ of (char)
  | UPPER_AZ of (char)
  | DIGIT of (char)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DID_COLON
    | TOKEN_COLON
    | TOKEN_PERIOD
    | TOKEN_DASH
    | TOKEN_UNDERSCORE
    | TOKEN_LOWER_AZ
    | TOKEN_UPPER_AZ
    | TOKEN_DIGIT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startdid
    | NONTERM_did
    | NONTERM_methodName
    | NONTERM_methodChars
    | NONTERM_methodChar
    | NONTERM_methodSpecificIds
    | NONTERM_methodSpecificId
    | NONTERM_idChars
    | NONTERM_idChar
    | NONTERM_alphaChar

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | DID_COLON  -> 1 
  | COLON  -> 2 
  | PERIOD  -> 3 
  | DASH  -> 4 
  | UNDERSCORE  -> 5 
  | LOWER_AZ _ -> 6 
  | UPPER_AZ _ -> 7 
  | DIGIT _ -> 8 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_DID_COLON 
  | 2 -> TOKEN_COLON 
  | 3 -> TOKEN_PERIOD 
  | 4 -> TOKEN_DASH 
  | 5 -> TOKEN_UNDERSCORE 
  | 6 -> TOKEN_LOWER_AZ 
  | 7 -> TOKEN_UPPER_AZ 
  | 8 -> TOKEN_DIGIT 
  | 11 -> TOKEN_end_of_input
  | 9 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startdid 
    | 1 -> NONTERM_did 
    | 2 -> NONTERM_methodName 
    | 3 -> NONTERM_methodChars 
    | 4 -> NONTERM_methodChars 
    | 5 -> NONTERM_methodChar 
    | 6 -> NONTERM_methodChar 
    | 7 -> NONTERM_methodSpecificIds 
    | 8 -> NONTERM_methodSpecificIds 
    | 9 -> NONTERM_methodSpecificId 
    | 10 -> NONTERM_methodSpecificId 
    | 11 -> NONTERM_idChars 
    | 12 -> NONTERM_idChars 
    | 13 -> NONTERM_idChar 
    | 14 -> NONTERM_idChar 
    | 15 -> NONTERM_idChar 
    | 16 -> NONTERM_idChar 
    | 17 -> NONTERM_idChar 
    | 18 -> NONTERM_alphaChar 
    | 19 -> NONTERM_alphaChar 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 11 
let _fsyacc_tagOfErrorTerminal = 9

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | DID_COLON  -> "DID_COLON" 
  | COLON  -> "COLON" 
  | PERIOD  -> "PERIOD" 
  | DASH  -> "DASH" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | LOWER_AZ _ -> "LOWER_AZ" 
  | UPPER_AZ _ -> "UPPER_AZ" 
  | DIGIT _ -> "DIGIT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | DID_COLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | PERIOD  -> (null : System.Object) 
  | DASH  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | LOWER_AZ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UPPER_AZ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIGIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 2us; 3us; 2us; 65535us; 2us; 6us; 7us; 8us; 2us; 65535us; 2us; 7us; 7us; 7us; 2us; 65535us; 4us; 5us; 12us; 13us; 2us; 65535us; 4us; 11us; 12us; 11us; 3us; 65535us; 4us; 14us; 12us; 14us; 15us; 16us; 3us; 65535us; 4us; 15us; 12us; 15us; 15us; 15us; 3us; 65535us; 4us; 17us; 12us; 17us; 15us; 17us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 11us; 14us; 17us; 21us; 25us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 7us; 8us; 1us; 8us; 1us; 8us; 1us; 10us; 2us; 11us; 12us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 17us; 19us; 21us; 23us; 26us; 28us; 30us; 32us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; |]
let _fsyacc_action_rows = 24
let _fsyacc_actionTableElements = [|1us; 32768us; 1us; 2us; 0us; 49152us; 2us; 32768us; 6us; 9us; 8us; 10us; 1us; 32768us; 2us; 4us; 6us; 16393us; 3us; 19us; 4us; 20us; 5us; 21us; 6us; 22us; 7us; 23us; 8us; 18us; 0us; 16385us; 0us; 16386us; 2us; 16387us; 6us; 9us; 8us; 10us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 1us; 16391us; 2us; 12us; 6us; 16393us; 3us; 19us; 4us; 20us; 5us; 21us; 6us; 22us; 7us; 23us; 8us; 18us; 0us; 16392us; 0us; 16394us; 6us; 16395us; 3us; 19us; 4us; 20us; 5us; 21us; 6us; 22us; 7us; 23us; 8us; 18us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 6us; 8us; 15us; 16us; 17us; 20us; 21us; 22us; 23us; 25us; 32us; 33us; 34us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 4us; 1us; 1us; 2us; 1us; 1us; 1us; 3us; 0us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 16385us; 16386us; 65535us; 16388us; 16389us; 16390us; 65535us; 65535us; 16392us; 16394us; 65535us; 16396us; 16397us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; |]
let _fsyacc_reductions ()  =    [| 
# 151 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  DecentralizedIdentifier )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Internal.Utilities.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startdid));
# 160 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'methodName)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'methodSpecificIds)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "DID\DidParser.fsy"
                                                                             { MethodName = _2; MethodSpecificIds = Array.ofList _4; } 
                   )
# 29 "DID\DidParser.fsy"
                 :  DecentralizedIdentifier ));
# 172 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'methodChars)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "DID\DidParser.fsy"
                                               String(Array.ofList _1) 
                   )
# 32 "DID\DidParser.fsy"
                 : 'methodName));
# 183 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'methodChar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "DID\DidParser.fsy"
                                               [ _1 ] 
                   )
# 35 "DID\DidParser.fsy"
                 : 'methodChars));
# 194 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'methodChar)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'methodChars)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "DID\DidParser.fsy"
                                                          _1 :: _2 
                   )
# 36 "DID\DidParser.fsy"
                 : 'methodChars));
# 206 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "DID\DidParser.fsy"
                                               _1 
                   )
# 39 "DID\DidParser.fsy"
                 : 'methodChar));
# 217 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "DID\DidParser.fsy"
                                               _1 
                   )
# 40 "DID\DidParser.fsy"
                 : 'methodChar));
# 228 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'methodSpecificId)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "DID\DidParser.fsy"
                                               [ _1 ] 
                   )
# 43 "DID\DidParser.fsy"
                 : 'methodSpecificIds));
# 239 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'methodSpecificId)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'methodSpecificIds)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "DID\DidParser.fsy"
                                                                      _1 :: _3 
                   )
# 44 "DID\DidParser.fsy"
                 : 'methodSpecificIds));
# 251 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "DID\DidParser.fsy"
                                               "" 
                   )
# 47 "DID\DidParser.fsy"
                 : 'methodSpecificId));
# 261 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'idChars)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "DID\DidParser.fsy"
                                               String(Array.ofList _1) 
                   )
# 48 "DID\DidParser.fsy"
                 : 'methodSpecificId));
# 272 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'idChar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "DID\DidParser.fsy"
                                               [ _1 ] 
                   )
# 51 "DID\DidParser.fsy"
                 : 'idChars));
# 283 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'idChar)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'idChars)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "DID\DidParser.fsy"
                                               _1 :: _2 
                   )
# 52 "DID\DidParser.fsy"
                 : 'idChars));
# 295 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'alphaChar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "DID\DidParser.fsy"
                                               _1 
                   )
# 55 "DID\DidParser.fsy"
                 : 'idChar));
# 306 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "DID\DidParser.fsy"
                                               _1 
                   )
# 56 "DID\DidParser.fsy"
                 : 'idChar));
# 317 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "DID\DidParser.fsy"
                                               '.' 
                   )
# 57 "DID\DidParser.fsy"
                 : 'idChar));
# 327 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "DID\DidParser.fsy"
                                               '-' 
                   )
# 58 "DID\DidParser.fsy"
                 : 'idChar));
# 337 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "DID\DidParser.fsy"
                                               '_' 
                   )
# 59 "DID\DidParser.fsy"
                 : 'idChar));
# 347 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "DID\DidParser.fsy"
                                               _1 
                   )
# 62 "DID\DidParser.fsy"
                 : 'alphaChar));
# 358 "DID\DidParser.fs"
        (fun (parseState : Internal.Utilities.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "DID\DidParser.fsy"
                                               _1 
                   )
# 63 "DID\DidParser.fsy"
                 : 'alphaChar));
|]
# 370 "DID\DidParser.fs"
let tables () : Internal.Utilities.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Internal.Utilities.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 12;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let did lexer lexbuf :  DecentralizedIdentifier  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
